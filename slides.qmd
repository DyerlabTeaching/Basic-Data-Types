---
title: "Basic Data Types"
subtitle: "&nbsp;"
author: Rodney Dyer, PhD
format: 
  revealjs:
    background-transition: fade
    theme: default
    logo: "media/ces_logo.png"
    chalkboard: true
editor: source
execute: 
  echo: true
title-slide-attributes: 
  data-background-image: "media/contour.png"
  data-background-position: "right"
  data-background-size: initial
---


## Numerical Data

Numerical data is the *most common* type of data that we will all be using.  In `R`, most computations use this type.

&nbsp;


::: {.incremental}
- Counts, measurements, etc.
- Decimal or Integer
- Real and Imaginary
:::

::: {.fragment .fade-in}

### Example of assignment 
```{r}
42 + 24
```
:::


## Assignment Operator

In `R`, values can be assigned to variables using the `->` operator.  

::: {.incremental}
- Variable names should be informative
    - Must *start with* letter
    - Can include numbers, underscore, periods
    - No spaces
    - Case sensitive.
- Assignment is directional `->` and `<-` work.
- Use names that won't make your *future self* hate your *present self*
:::

## Examples

Here are some examples of assignment values, in both directions.  I find it helpful to read out the code directly 

*pop1.x 'is assigned the value of' 23*

&nbsp;

```{r}
pop1.x <- 23
pop1.y <- 55
56 -> pop2.x
63 -> pop2.y
```

## Viewing The Values in Variables

And we can see the values *stored* in those variables by simply typing the names of the variables.

&nbsp;

```{r}
pop1.x 
```

&nbsp;

```{r}
pop1.y
```

::: {.fragment .fade-in}
You can also view the value in a variable by looking in the *Environment* tab in RStudio
:::


## Operators

Most common operators are available and work just the way that you think.  The order of operations is still the same as well, you can use parentheses to order things if necessary.

&nbps;

```{r}
distance <- sqrt( (pop1.x - pop2.x)^2 + (pop1.y - pop2.y)^2  )
distance
```


## Named Functions

As in the previous example, the mathematical function `sqrt()` performs a *square root* operator.  


::: {.incremental}
- Some operators are written like functions.
<pre>
function_name + opening parenthesis + arguments + closing parenthesis
</pre>
- Others are combinations of existing glyphs surrounded by percentages.
<pre>
percent sign + operator + percent sign
</pre>
- There is just not enough keys (and associated glyphs) on the keyboard to handle all the potential types of operators.
:::

## Order of Operations (Top to Bottom) {.scrollable}

You can find this list by `?Syntax` and the help system will show you the following table.

Operator          | 	Description  
------------------|--------------------------------------
:: :::	          | access variables in a namespace
$ @	              | component / slot extraction
[ [[              | indexing
^                 | exponentiation (right to left)
- +               | unary minus and plus
:                 | sequence operator
%any%	            | special operators (including %% and %/%)
* /               | multiply, divide
+ -               | (binary) add, subtract
< > <= >= == !=   | ordering and comparison
!	                | negation
& &&              | and
| ||              | or
~                 | as in formula
-> ->>            | rightwards assignment
<- <<-            | assignment (right to left)
=                 | assignment (right to left)
?	                | help (unary and binary)




# Introspection & Coercion {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}

## Data Classes

Each data type in `R` can be asked what *class* of variable it points to.

&nbsp;

::: {.fragment}
```{r}
x <- 42
class( x )
```

This *class type* is a data type identifier.

:::

## Introspection

We can also ask a variable if *it is a* particular type of variable.  In `R`, the convention is to create a function that has the form of  `is.datatype()` that will determine if the variable passed to the function is that *datatype*.

&nbsp;

::: {.fragment }
The values they return are `TRUE` if it is

```{r}
is.numeric( pop1.x )
```
:::


::: {.fragment }
or `FALSE` if it is not

```{r}
is.numeric( "Dyer is my favorite professor")
```
:::

## Uses for Introspection

It is not common to use introspection **UNTIL** your code does not work for some reason.  Then it is really important to try to figure out what the problem is and if the data we are looking at are really the type we are thinking they are.  

```{r}
#| error: true
x <- "42"
x + 23
```

::: {.fragment}
This **error** is thrown because value of `x` is:
```{r}
class(x)
```
:::

::: {.fragment}
but the addition operator tries to combine the `x` with 
```{r}
class( 23 )
```

which does not even make sense.
:::

## Coercion

There are times (like in the last slide) that we'd like to *coerce* a variable of one type into another type.  In this case, we'd like to take the `character` value pointed to by `x` and *coerce* it into a numeric type so that we can perform that addition operator.


## Coercion

We have a *coercion* operator that has the form `as.datatype()`.  If possible, it will convert the passed variable into the other `datatype`


::: {.fragment}
```{r}
as.numeric( x ) + 23 
```
:::

::: {.fragment}
If not, it will give return a missing value (`NA`)

```{r}
#| error: true
as.numeric( "Bob" )
```

:::



# Character Data {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}


## Character

All textual data is of type `character` and is defined as zero or more glyphs surrounded by either single or double quotes.

&nbsp;

```{r}
firstName <- "Rodney"
firstName
class( firstName )
```


## Introspection

As for numeric data types, character also have an introspection operator.

&nbsp;

```{r}
is.character( firstName )
```

&nbsp;

```{r}
is.character( 23 )
```

&nbsp;

```{r}
is.character( "23" )
```


## Coercion Operators

The `character` data type is the most basal type and as such, any type of data can be coerced into its character representation.

&nbsp;

```{r}
y <- as.character( pi )
y
```


# Logical Data {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}

## Logical Data

Logical data consists of two states, `TRUE` and `FALSE`

&nbsp;

```{r}
dyer_has_good_jokes <- TRUE
dyer_has_good_jokes
```

## Introspection

`Logical` types have an introspection operator.

::: {.fragment}
```{r}
is.logical( dyer_has_good_jokes )
```
:::


## Coercion

Coercion of something else to a `Logical` is more case-specific.

&nbsp;

::: {.fragment}
From `character` data.  

```{r}
as.logical( "TRUE" )
```

&nbsp;

```{r}
as.logical( "FALSE" )
```

:::

&nbsp;

::: {.fragment}
Other `character` types result in `NA` (missing data).

```{r}
as.logical( "Bob" )
```
:::


## Coercion

Coercion of something else to a `Logical` is more case-specific.

&nbsp;

From `numeric` data:  
- Values of `0` are `FALSE`  
- Non-zero values are `TRUE`  

&nbsp;

::: {.fragment}
```{r}
as.logical(0)
```

&nbsp;

```{r}
as.logical( 323 )
```

:::


## Bullets

When you click the **Render** button a document will be generated that includes:

-   Content authored with markdown
-   Output from executable code

## Some Title

::: {layout-ncol="2"}
### List One

-   Item A
-   Item B
-   Item C

### List Two

-   Item X
-   Item Y
-   Item Z
:::

## Another Slide

::: {layout-ncol="2"}
### The code

```{r eval=FALSE, echo=TRUE}
hist( rnorm(1200) )
```

### The Plot

```{r echo=FALSE}
hist( rnorm( 1200 ) )
```
:::

## And another slide

::: {layout-ncol="2"}
-   Item X
-   Item Y
-   Item Z

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur gravida eu erat et fring. Morbi congue augue vel eros ullamcorper, eget convallis tortor sagittis. Fusce sodales viverra mauris a fringilla. Donec feugiat, justo eu blandit placerat, enim dui volutpat turpis, eu dictum lectus urna eu urna. Mauris sed massa ornare, interdum ipsum a, semper massa.
:::

## Code

When you click the **Render** button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r echo=TRUE}
px <- 0.75
py <- 0.25
m <- 0.1
ret <- rep(NA,100)
ret[1] <- py
for( i in 2:100) {
  ret[i] <- (1-m)*ret[(i-1)] + px * m   
}
```

## Results

```{r}
plot( ret, type="l")
```

## Questions

::: {layout-ncol="2"}
If you have any questions, please feel free to either post them as an "Issue" on your copy of this GitHub Repository, post to the [Canvas](https://canvas.vcu.edu) discussion board for the class, or drop me an [email](mailto://rjdyer@vcu.edu).

![](media/peter_sellers.gif){.middle fig-alt="Peter Sellers looking bored" fig-align="center" width="500"}
:::
